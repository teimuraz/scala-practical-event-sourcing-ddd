/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables


import backend.jooq.generated.Indexes
import backend.jooq.generated.Keys
import backend.jooq.generated.Public
import backend.jooq.generated.tables.records.AggregateVersionsRecord

import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object AggregateVersions {

  /**
   * The reference instance of <code>public.aggregate_versions</code>
   */
  val AGGREGATE_VERSIONS = new AggregateVersions
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class AggregateVersions(alias : Name, aliased : Table[AggregateVersionsRecord], parameters : Array[ Field[_] ]) extends TableImpl[AggregateVersionsRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AggregateVersionsRecord] = {
    classOf[AggregateVersionsRecord]
  }

  /**
   * The column <code>public.aggregate_versions.aggregate_root_type</code>.
   */
  val AGGREGATE_ROOT_TYPE : TableField[AggregateVersionsRecord, Integer] = createField("aggregate_root_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.aggregate_versions.aggregate_root_id</code>.
   */
  val AGGREGATE_ROOT_ID : TableField[AggregateVersionsRecord, Long] = createField("aggregate_root_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.aggregate_versions.current_version</code>.
   */
  val CURRENT_VERSION : TableField[AggregateVersionsRecord, Integer] = createField("current_version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>public.aggregate_versions</code> table reference
   */
  def this() = {
    this(DSL.name("aggregate_versions"), null, null)
  }

  /**
   * Create an aliased <code>public.aggregate_versions</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), backend.jooq.generated.tables.AggregateVersions.AGGREGATE_VERSIONS, null)
  }

  /**
   * Create an aliased <code>public.aggregate_versions</code> table reference
   */
  def this(alias : Name) = {
    this(alias, backend.jooq.generated.tables.AggregateVersions.AGGREGATE_VERSIONS, null)
  }

  private def this(alias : Name, aliased : Table[AggregateVersionsRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.AGGREGATE_VERSIONS_PK)
  }

  override def getPrimaryKey : UniqueKey[AggregateVersionsRecord] = {
    Keys.AGGREGATE_VERSIONS_PK
  }

  override def getKeys : List[ UniqueKey[AggregateVersionsRecord] ] = {
    return Arrays.asList[ UniqueKey[AggregateVersionsRecord] ](Keys.AGGREGATE_VERSIONS_PK)
  }

  override def as(alias : String) : AggregateVersions = {
    new AggregateVersions(DSL.name(alias), this)
  }

  override def as(alias : Name) : AggregateVersions = {
    new AggregateVersions(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : AggregateVersions = {
    new AggregateVersions(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : AggregateVersions = {
    new AggregateVersions(name, null)
  }
}
