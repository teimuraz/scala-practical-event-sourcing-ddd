/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables.records


import backend.jooq.generated.tables.PlayEvolutions

import java.lang.Integer
import java.lang.String

import javax.annotation.Generated

import org.joda.time.DateTime
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class PlayEvolutionsRecord extends UpdatableRecordImpl[PlayEvolutionsRecord](PlayEvolutions.PLAY_EVOLUTIONS) with Record7[Integer, String, DateTime, String, String, String, String] {

  /**
   * Setter for <code>public.play_evolutions.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.play_evolutions.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>public.play_evolutions.hash</code>.
   */
  def setHash(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.play_evolutions.hash</code>.
   */
  def getHash : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>public.play_evolutions.applied_at</code>.
   */
  def setAppliedAt(value : DateTime) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.play_evolutions.applied_at</code>.
   */
  def getAppliedAt : DateTime = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[DateTime]
  }

  /**
   * Setter for <code>public.play_evolutions.apply_script</code>.
   */
  def setApplyScript(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.play_evolutions.apply_script</code>.
   */
  def getApplyScript : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>public.play_evolutions.revert_script</code>.
   */
  def setRevertScript(value : String) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>public.play_evolutions.revert_script</code>.
   */
  def getRevertScript : String = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>public.play_evolutions.state</code>.
   */
  def setState(value : String) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>public.play_evolutions.state</code>.
   */
  def getState : String = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>public.play_evolutions.last_problem</code>.
   */
  def setLastProblem(value : String) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>public.play_evolutions.last_problem</code>.
   */
  def getLastProblem : String = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[String]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row7[Integer, String, DateTime, String, String, String, String] = {
    super.fieldsRow.asInstanceOf[ Row7[Integer, String, DateTime, String, String, String, String] ]
  }

  override def valuesRow : Row7[Integer, String, DateTime, String, String, String, String] = {
    super.valuesRow.asInstanceOf[ Row7[Integer, String, DateTime, String, String, String, String] ]
  }
  override def field1 : Field[Integer] = PlayEvolutions.PLAY_EVOLUTIONS.ID
  override def field2 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.HASH
  override def field3 : Field[DateTime] = PlayEvolutions.PLAY_EVOLUTIONS.APPLIED_AT
  override def field4 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.APPLY_SCRIPT
  override def field5 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.REVERT_SCRIPT
  override def field6 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.STATE
  override def field7 : Field[String] = PlayEvolutions.PLAY_EVOLUTIONS.LAST_PROBLEM
  override def component1 : Integer = getId
  override def component2 : String = getHash
  override def component3 : DateTime = getAppliedAt
  override def component4 : String = getApplyScript
  override def component5 : String = getRevertScript
  override def component6 : String = getState
  override def component7 : String = getLastProblem
  override def value1 : Integer = getId
  override def value2 : String = getHash
  override def value3 : DateTime = getAppliedAt
  override def value4 : String = getApplyScript
  override def value5 : String = getRevertScript
  override def value6 : String = getState
  override def value7 : String = getLastProblem

  override def value1(value : Integer) : PlayEvolutionsRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : PlayEvolutionsRecord = {
    setHash(value)
    this
  }

  override def value3(value : DateTime) : PlayEvolutionsRecord = {
    setAppliedAt(value)
    this
  }

  override def value4(value : String) : PlayEvolutionsRecord = {
    setApplyScript(value)
    this
  }

  override def value5(value : String) : PlayEvolutionsRecord = {
    setRevertScript(value)
    this
  }

  override def value6(value : String) : PlayEvolutionsRecord = {
    setState(value)
    this
  }

  override def value7(value : String) : PlayEvolutionsRecord = {
    setLastProblem(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : DateTime, value4 : String, value5 : String, value6 : String, value7 : String) : PlayEvolutionsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised PlayEvolutionsRecord
   */
  def this(id : Integer, hash : String, appliedAt : DateTime, applyScript : String, revertScript : String, state : String, lastProblem : String) = {
    this()

    set(0, id)
    set(1, hash)
    set(2, appliedAt)
    set(3, applyScript)
    set(4, revertScript)
    set(5, state)
    set(6, lastProblem)
  }
}
