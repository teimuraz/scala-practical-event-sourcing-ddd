/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables.records


import backend.jooq.generated.tables.AggregateVersions

import java.lang.Integer
import java.lang.Long

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class AggregateVersionsRecord extends UpdatableRecordImpl[AggregateVersionsRecord](AggregateVersions.AGGREGATE_VERSIONS) with Record3[Integer, Long, Integer] {

  /**
   * Setter for <code>public.aggregate_versions.aggregate_root_type</code>.
   */
  def setAggregateRootType(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.aggregate_versions.aggregate_root_type</code>.
   */
  def getAggregateRootType : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>public.aggregate_versions.aggregate_root_id</code>.
   */
  def setAggregateRootId(value : Long) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.aggregate_versions.aggregate_root_id</code>.
   */
  def getAggregateRootId : Long = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Long]
  }

  /**
   * Setter for <code>public.aggregate_versions.current_version</code>.
   */
  def setCurrentVersion(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.aggregate_versions.current_version</code>.
   */
  def getCurrentVersion : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record2[Integer, Long] = {
    return super.key.asInstanceOf[ Record2[Integer, Long] ]
  }

  // -------------------------------------------------------------------------
  // Record3 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row3[Integer, Long, Integer] = {
    super.fieldsRow.asInstanceOf[ Row3[Integer, Long, Integer] ]
  }

  override def valuesRow : Row3[Integer, Long, Integer] = {
    super.valuesRow.asInstanceOf[ Row3[Integer, Long, Integer] ]
  }
  override def field1 : Field[Integer] = AggregateVersions.AGGREGATE_VERSIONS.AGGREGATE_ROOT_TYPE
  override def field2 : Field[Long] = AggregateVersions.AGGREGATE_VERSIONS.AGGREGATE_ROOT_ID
  override def field3 : Field[Integer] = AggregateVersions.AGGREGATE_VERSIONS.CURRENT_VERSION
  override def component1 : Integer = getAggregateRootType
  override def component2 : Long = getAggregateRootId
  override def component3 : Integer = getCurrentVersion
  override def value1 : Integer = getAggregateRootType
  override def value2 : Long = getAggregateRootId
  override def value3 : Integer = getCurrentVersion

  override def value1(value : Integer) : AggregateVersionsRecord = {
    setAggregateRootType(value)
    this
  }

  override def value2(value : Long) : AggregateVersionsRecord = {
    setAggregateRootId(value)
    this
  }

  override def value3(value : Integer) : AggregateVersionsRecord = {
    setCurrentVersion(value)
    this
  }

  override def values(value1 : Integer, value2 : Long, value3 : Integer) : AggregateVersionsRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this
  }

  /**
   * Create a detached, initialised AggregateVersionsRecord
   */
  def this(aggregateRootType : Integer, aggregateRootId : Long, currentVersion : Integer) = {
    this()

    set(0, aggregateRootType)
    set(1, aggregateRootId)
    set(2, currentVersion)
  }
}
