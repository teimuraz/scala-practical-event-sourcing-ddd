/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables.records


import backend.jooq.generated.tables.EventsJournal

import java.lang.Integer
import java.lang.Long
import java.lang.String

import javax.annotation.Generated

import org.joda.time.DateTime
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import play.api.libs.json.JsValue

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class EventsJournalRecord extends UpdatableRecordImpl[EventsJournalRecord](EventsJournal.EVENTS_JOURNAL) with Record7[Long, Integer, Long, String, JsValue, Integer, DateTime] {

  /**
   * Setter for <code>public.events_journal.event_offset</code>.
   */
  def setEventOffset(value : Long) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.events_journal.event_offset</code>.
   */
  def getEventOffset : Long = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Long]
  }

  /**
   * Setter for <code>public.events_journal.aggregate_root_type</code>.
   */
  def setAggregateRootType(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.events_journal.aggregate_root_type</code>.
   */
  def getAggregateRootType : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>public.events_journal.aggregate_root_id</code>.
   */
  def setAggregateRootId(value : Long) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.events_journal.aggregate_root_id</code>.
   */
  def getAggregateRootId : Long = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Long]
  }

  /**
   * Setter for <code>public.events_journal.event_type</code>.
   */
  def setEventType(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.events_journal.event_type</code>.
   */
  def getEventType : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>public.events_journal.event</code>.
   */
  def setEvent(value : JsValue) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>public.events_journal.event</code>.
   */
  def getEvent : JsValue = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[JsValue]
  }

  /**
   * Setter for <code>public.events_journal.aggregate_version</code>.
   */
  def setAggregateVersion(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>public.events_journal.aggregate_version</code>.
   */
  def getAggregateVersion : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>public.events_journal.created_at</code>.
   */
  def setCreatedAt(value : DateTime) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>public.events_journal.created_at</code>.
   */
  def getCreatedAt : DateTime = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[DateTime]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Long] = {
    return super.key.asInstanceOf[ Record1[Long] ]
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row7[Long, Integer, Long, String, JsValue, Integer, DateTime] = {
    super.fieldsRow.asInstanceOf[ Row7[Long, Integer, Long, String, JsValue, Integer, DateTime] ]
  }

  override def valuesRow : Row7[Long, Integer, Long, String, JsValue, Integer, DateTime] = {
    super.valuesRow.asInstanceOf[ Row7[Long, Integer, Long, String, JsValue, Integer, DateTime] ]
  }
  override def field1 : Field[Long] = EventsJournal.EVENTS_JOURNAL.EVENT_OFFSET
  override def field2 : Field[Integer] = EventsJournal.EVENTS_JOURNAL.AGGREGATE_ROOT_TYPE
  override def field3 : Field[Long] = EventsJournal.EVENTS_JOURNAL.AGGREGATE_ROOT_ID
  override def field4 : Field[String] = EventsJournal.EVENTS_JOURNAL.EVENT_TYPE
  override def field5 : Field[JsValue] = EventsJournal.EVENTS_JOURNAL.EVENT
  override def field6 : Field[Integer] = EventsJournal.EVENTS_JOURNAL.AGGREGATE_VERSION
  override def field7 : Field[DateTime] = EventsJournal.EVENTS_JOURNAL.CREATED_AT
  override def component1 : Long = getEventOffset
  override def component2 : Integer = getAggregateRootType
  override def component3 : Long = getAggregateRootId
  override def component4 : String = getEventType
  override def component5 : JsValue = getEvent
  override def component6 : Integer = getAggregateVersion
  override def component7 : DateTime = getCreatedAt
  override def value1 : Long = getEventOffset
  override def value2 : Integer = getAggregateRootType
  override def value3 : Long = getAggregateRootId
  override def value4 : String = getEventType
  override def value5 : JsValue = getEvent
  override def value6 : Integer = getAggregateVersion
  override def value7 : DateTime = getCreatedAt

  override def value1(value : Long) : EventsJournalRecord = {
    setEventOffset(value)
    this
  }

  override def value2(value : Integer) : EventsJournalRecord = {
    setAggregateRootType(value)
    this
  }

  override def value3(value : Long) : EventsJournalRecord = {
    setAggregateRootId(value)
    this
  }

  override def value4(value : String) : EventsJournalRecord = {
    setEventType(value)
    this
  }

  override def value5(value : JsValue) : EventsJournalRecord = {
    setEvent(value)
    this
  }

  override def value6(value : Integer) : EventsJournalRecord = {
    setAggregateVersion(value)
    this
  }

  override def value7(value : DateTime) : EventsJournalRecord = {
    setCreatedAt(value)
    this
  }

  override def values(value1 : Long, value2 : Integer, value3 : Long, value4 : String, value5 : JsValue, value6 : Integer, value7 : DateTime) : EventsJournalRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised EventsJournalRecord
   */
  def this(eventOffset : Long, aggregateRootType : Integer, aggregateRootId : Long, eventType : String, event : JsValue, aggregateVersion : Integer, createdAt : DateTime) = {
    this()

    set(0, eventOffset)
    set(1, aggregateRootType)
    set(2, aggregateRootId)
    set(3, eventType)
    set(4, event)
    set(5, aggregateVersion)
    set(6, createdAt)
  }
}
