/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables


import backend.jooq.generated.Indexes
import backend.jooq.generated.Keys
import backend.jooq.generated.Public
import backend.jooq.generated.tables.records.EventsJournalRecord

import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import library.jooq.JodaDateTimeConverter
import library.jooq.PostgresJsonJsValueBinding

import org.joda.time.DateTime
import org.jooq.Field
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import play.api.libs.json.JsValue

import scala.Array


object EventsJournal {

  /**
   * The reference instance of <code>public.events_journal</code>
   */
  val EVENTS_JOURNAL = new EventsJournal
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class EventsJournal(alias : Name, aliased : Table[EventsJournalRecord], parameters : Array[ Field[_] ]) extends TableImpl[EventsJournalRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[EventsJournalRecord] = {
    classOf[EventsJournalRecord]
  }

  /**
   * The column <code>public.events_journal.event_offset</code>.
   */
  val EVENT_OFFSET : TableField[EventsJournalRecord, Long] = createField("event_offset", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('events_journal_event_offset_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), "")

  /**
   * The column <code>public.events_journal.aggregate_root_type</code>.
   */
  val AGGREGATE_ROOT_TYPE : TableField[EventsJournalRecord, Integer] = createField("aggregate_root_type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.events_journal.aggregate_root_id</code>.
   */
  val AGGREGATE_ROOT_ID : TableField[EventsJournalRecord, Long] = createField("aggregate_root_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.events_journal.event_type</code>.
   */
  val EVENT_TYPE : TableField[EventsJournalRecord, String] = createField("event_type", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.events_journal.event</code>.
   */
  val EVENT : TableField[EventsJournalRecord, JsValue] = createField("event", org.jooq.impl.DefaultDataType.getDefaultDataType("jsonb"), "", new PostgresJsonJsValueBinding())

  /**
   * The column <code>public.events_journal.aggregate_version</code>.
   */
  val AGGREGATE_VERSION : TableField[EventsJournalRecord, Integer] = createField("aggregate_version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.events_journal.created_at</code>.
   */
  val CREATED_AT : TableField[EventsJournalRecord, DateTime] = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "", new JodaDateTimeConverter())

  /**
   * Create a <code>public.events_journal</code> table reference
   */
  def this() = {
    this(DSL.name("events_journal"), null, null)
  }

  /**
   * Create an aliased <code>public.events_journal</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), backend.jooq.generated.tables.EventsJournal.EVENTS_JOURNAL, null)
  }

  /**
   * Create an aliased <code>public.events_journal</code> table reference
   */
  def this(alias : Name) = {
    this(alias, backend.jooq.generated.tables.EventsJournal.EVENTS_JOURNAL, null)
  }

  private def this(alias : Name, aliased : Table[EventsJournalRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.EVENTS_JOURNAL_AGGREGATE_ROOT_TYPE_IDX, Indexes.EVENTS_JOURNAL_EVENT_OFFSET_IDX, Indexes.EVENTS_JOURNAL_PK)
  }

  override def getIdentity : Identity[EventsJournalRecord, Long] = {
    Keys.IDENTITY_EVENTS_JOURNAL
  }

  override def getPrimaryKey : UniqueKey[EventsJournalRecord] = {
    Keys.EVENTS_JOURNAL_PK
  }

  override def getKeys : List[ UniqueKey[EventsJournalRecord] ] = {
    return Arrays.asList[ UniqueKey[EventsJournalRecord] ](Keys.EVENTS_JOURNAL_PK)
  }

  override def as(alias : String) : EventsJournal = {
    new EventsJournal(DSL.name(alias), this)
  }

  override def as(alias : Name) : EventsJournal = {
    new EventsJournal(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : EventsJournal = {
    new EventsJournal(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : EventsJournal = {
    new EventsJournal(name, null)
  }
}
