/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables


import backend.jooq.generated.Indexes
import backend.jooq.generated.Keys
import backend.jooq.generated.Public
import backend.jooq.generated.tables.records.AmPendingUsersRecord

import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import library.jooq.JodaDateTimeConverter

import org.joda.time.DateTime
import org.jooq.Field
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object AmPendingUsers {

  /**
   * The reference instance of <code>public.am_pending_users</code>
   */
  val AM_PENDING_USERS = new AmPendingUsers
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class AmPendingUsers(alias : Name, aliased : Table[AmPendingUsersRecord], parameters : Array[ Field[_] ]) extends TableImpl[AmPendingUsersRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AmPendingUsersRecord] = {
    classOf[AmPendingUsersRecord]
  }

  /**
   * The column <code>public.am_pending_users.id</code>.
   */
  val ID : TableField[AmPendingUsersRecord, Long] = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.am_pending_users.email</code>.
   */
  val EMAIL : TableField[AmPendingUsersRecord, String] = createField("email", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.am_pending_users.username</code>.
   */
  val USERNAME : TableField[AmPendingUsersRecord, String] = createField("username", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), "")

  /**
   * The column <code>public.am_pending_users.password</code>.
   */
  val PASSWORD : TableField[AmPendingUsersRecord, String] = createField("password", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), "")

  /**
   * The column <code>public.am_pending_users.salt</code>.
   */
  val SALT : TableField[AmPendingUsersRecord, String] = createField("salt", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), "")

  /**
   * The column <code>public.am_pending_users.first_name</code>.
   */
  val FIRST_NAME : TableField[AmPendingUsersRecord, String] = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR(255), "")

  /**
   * The column <code>public.am_pending_users.last_name</code>.
   */
  val LAST_NAME : TableField[AmPendingUsersRecord, String] = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR(255), "")

  /**
   * The column <code>public.am_pending_users.created_at</code>.
   */
  val CREATED_AT : TableField[AmPendingUsersRecord, DateTime] = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), "", new JodaDateTimeConverter())

  /**
   * The column <code>public.am_pending_users.status</code>.
   */
  val STATUS : TableField[AmPendingUsersRecord, Integer] = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>public.am_pending_users.confirmed_at</code>.
   */
  val CONFIRMED_AT : TableField[AmPendingUsersRecord, DateTime] = createField("confirmed_at", org.jooq.impl.SQLDataType.TIMESTAMP, "", new JodaDateTimeConverter())

  /**
   * Create a <code>public.am_pending_users</code> table reference
   */
  def this() = {
    this(DSL.name("am_pending_users"), null, null)
  }

  /**
   * Create an aliased <code>public.am_pending_users</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), backend.jooq.generated.tables.AmPendingUsers.AM_PENDING_USERS, null)
  }

  /**
   * Create an aliased <code>public.am_pending_users</code> table reference
   */
  def this(alias : Name) = {
    this(alias, backend.jooq.generated.tables.AmPendingUsers.AM_PENDING_USERS, null)
  }

  private def this(alias : Name, aliased : Table[AmPendingUsersRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.AM_PENDING_USERS_EMAIL_IDX, Indexes.AM_PENDING_USERS_USERNAME_IDX, Indexes.PENDING_USERS_PKEY)
  }

  override def getPrimaryKey : UniqueKey[AmPendingUsersRecord] = {
    Keys.PENDING_USERS_PKEY
  }

  override def getKeys : List[ UniqueKey[AmPendingUsersRecord] ] = {
    return Arrays.asList[ UniqueKey[AmPendingUsersRecord] ](Keys.PENDING_USERS_PKEY)
  }

  override def as(alias : String) : AmPendingUsers = {
    new AmPendingUsers(DSL.name(alias), this)
  }

  override def as(alias : Name) : AmPendingUsers = {
    new AmPendingUsers(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : AmPendingUsers = {
    new AmPendingUsers(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : AmPendingUsers = {
    new AmPendingUsers(name, null)
  }
}
