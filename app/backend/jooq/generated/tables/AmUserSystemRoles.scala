/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables


import backend.jooq.generated.Indexes
import backend.jooq.generated.Keys
import backend.jooq.generated.Public
import backend.jooq.generated.tables.records.AmUserSystemRolesRecord

import java.lang.Class
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object AmUserSystemRoles {

  /**
   * The reference instance of <code>public.am_user_system_roles</code>
   */
  val AM_USER_SYSTEM_ROLES = new AmUserSystemRoles
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class AmUserSystemRoles(alias : Name, aliased : Table[AmUserSystemRolesRecord], parameters : Array[ Field[_] ]) extends TableImpl[AmUserSystemRolesRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AmUserSystemRolesRecord] = {
    classOf[AmUserSystemRolesRecord]
  }

  /**
   * The column <code>public.am_user_system_roles.user_id</code>.
   */
  val USER_ID : TableField[AmUserSystemRolesRecord, Long] = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.am_user_system_roles.role</code>.
   */
  val ROLE : TableField[AmUserSystemRolesRecord, String] = createField("role", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), "")

  /**
   * Create a <code>public.am_user_system_roles</code> table reference
   */
  def this() = {
    this(DSL.name("am_user_system_roles"), null, null)
  }

  /**
   * Create an aliased <code>public.am_user_system_roles</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), backend.jooq.generated.tables.AmUserSystemRoles.AM_USER_SYSTEM_ROLES, null)
  }

  /**
   * Create an aliased <code>public.am_user_system_roles</code> table reference
   */
  def this(alias : Name) = {
    this(alias, backend.jooq.generated.tables.AmUserSystemRoles.AM_USER_SYSTEM_ROLES, null)
  }

  private def this(alias : Name, aliased : Table[AmUserSystemRolesRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.FKI_USER_SYSTEM_ROLES_USER_ID_FK, Indexes.USER_SYSTEM_ROLES_PKEY)
  }

  override def getPrimaryKey : UniqueKey[AmUserSystemRolesRecord] = {
    Keys.USER_SYSTEM_ROLES_PKEY
  }

  override def getKeys : List[ UniqueKey[AmUserSystemRolesRecord] ] = {
    return Arrays.asList[ UniqueKey[AmUserSystemRolesRecord] ](Keys.USER_SYSTEM_ROLES_PKEY)
  }

  override def getReferences : List[ ForeignKey[AmUserSystemRolesRecord, _] ] = {
    return Arrays.asList[ ForeignKey[AmUserSystemRolesRecord, _] ](Keys.AM_USER_SYSTEM_ROLES__USER_SYSTEM_ROLES_USER_ID_FK)
  }

  override def as(alias : String) : AmUserSystemRoles = {
    new AmUserSystemRoles(DSL.name(alias), this)
  }

  override def as(alias : Name) : AmUserSystemRoles = {
    new AmUserSystemRoles(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : AmUserSystemRoles = {
    new AmUserSystemRoles(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : AmUserSystemRoles = {
    new AmUserSystemRoles(name, null)
  }
}
