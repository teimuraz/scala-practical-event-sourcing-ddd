/*
 * This file is generated by jOOQ.
*/
package backend.jooq.generated.tables


import backend.jooq.generated.Indexes
import backend.jooq.generated.Keys
import backend.jooq.generated.Public
import backend.jooq.generated.tables.records.TrackerProjectsRecord

import java.lang.Class
import java.lang.Long
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import library.jooq.JodaDateTimeConverter

import org.joda.time.DateTime
import org.jooq.Field
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object TrackerProjects {

  /**
   * The reference instance of <code>public.tracker_projects</code>
   */
  val TRACKER_PROJECTS = new TrackerProjects
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.5"
  ),
  comments = "This class is generated by jOOQ"
)
class TrackerProjects(alias : Name, aliased : Table[TrackerProjectsRecord], parameters : Array[ Field[_] ]) extends TableImpl[TrackerProjectsRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[TrackerProjectsRecord] = {
    classOf[TrackerProjectsRecord]
  }

  /**
   * The column <code>public.tracker_projects.id</code>.
   */
  val ID : TableField[TrackerProjectsRecord, Long] = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.tracker_projects.name</code>.
   */
  val NAME : TableField[TrackerProjectsRecord, String] = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.tracker_projects.code</code>.
   */
  val CODE : TableField[TrackerProjectsRecord, String] = createField("code", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), "")

  /**
   * The column <code>public.tracker_projects.organization_id</code>.
   */
  val ORGANIZATION_ID : TableField[TrackerProjectsRecord, Long] = createField("organization_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.tracker_projects.description</code>.
   */
  val DESCRIPTION : TableField[TrackerProjectsRecord, String] = createField("description", org.jooq.impl.SQLDataType.CLOB, "")

  /**
   * The column <code>public.tracker_projects.created_by_participant_id</code>.
   */
  val CREATED_BY_PARTICIPANT_ID : TableField[TrackerProjectsRecord, Long] = createField("created_by_participant_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.tracker_projects.created_at</code>.
   */
  val CREATED_AT : TableField[TrackerProjectsRecord, DateTime] = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), "", new JodaDateTimeConverter())

  /**
   * Create a <code>public.tracker_projects</code> table reference
   */
  def this() = {
    this(DSL.name("tracker_projects"), null, null)
  }

  /**
   * Create an aliased <code>public.tracker_projects</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), backend.jooq.generated.tables.TrackerProjects.TRACKER_PROJECTS, null)
  }

  /**
   * Create an aliased <code>public.tracker_projects</code> table reference
   */
  def this(alias : Name) = {
    this(alias, backend.jooq.generated.tables.TrackerProjects.TRACKER_PROJECTS, null)
  }

  private def this(alias : Name, aliased : Table[TrackerProjectsRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.TRACKER_PROJECTS_CREATED_BY_PARTICIPANT_ID_IDX, Indexes.TRACKER_PROJECTS_ORGANIZATION_ID_CODE_KEY, Indexes.TRACKER_PROJECTS_ORGANIZATION_ID_NAME_KEY, Indexes.TRACKER_PROJECTS_PKEY)
  }

  override def getPrimaryKey : UniqueKey[TrackerProjectsRecord] = {
    Keys.TRACKER_PROJECTS_PKEY
  }

  override def getKeys : List[ UniqueKey[TrackerProjectsRecord] ] = {
    return Arrays.asList[ UniqueKey[TrackerProjectsRecord] ](Keys.TRACKER_PROJECTS_PKEY, Keys.TRACKER_PROJECTS_ORGANIZATION_ID_NAME_KEY, Keys.TRACKER_PROJECTS_ORGANIZATION_ID_CODE_KEY)
  }

  override def as(alias : String) : TrackerProjects = {
    new TrackerProjects(DSL.name(alias), this)
  }

  override def as(alias : Name) : TrackerProjects = {
    new TrackerProjects(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : TrackerProjects = {
    new TrackerProjects(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : TrackerProjects = {
    new TrackerProjects(name, null)
  }
}
